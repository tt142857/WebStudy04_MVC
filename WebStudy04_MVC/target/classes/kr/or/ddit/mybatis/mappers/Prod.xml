<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.prod.dao.ProdDAO">

	<!-- ${} : replace text(대체구문) : 하지만 이런 건 좋지 않음, SQL문은 동적으로 쓰면 공격에 당하기 취약하기 때문 -->
	<!-- #{} : inline parameter -->
	<sql id="sqlSearchFrag">
		<trim prefix="WHERE" prefixOverrides="AND">
			<if test="detailCondition neq null">
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodLgu)">
					AND PROD_LGU = #{detailCondition.prodLgu}
				</if>
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodBuyer)">
					AND PROD_BUYER = #{detailCondition.prodBuyer}
				</if>
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodName)">
					AND INSTR(PROD_NAME, #{detailCondition.prodName}) > 0
				</if>
			</if>
		</trim>
	</sql>
	
	<select id="selectTotalRecord" resultType="int">
		SELECT COUNT(*)
		FROM PRODVIEW
		<include refid="sqlSearchFrag"></include>
	</select>
	
	<resultMap id="prodListMap" type="ProdVO" autoMapping="true">
		<association property="buyer" javaType="BuyerVO" autoMapping="true" />
	</resultMap>
	<select id="selectProdList" parameterType="PagingVO" resultMap="prodListMap">
		SELECT B.*
		FROM (
			SELECT ROWNUM RNUM, A.*
			FROM (
				SELECT
				    PROD_ID,     PROD_NAME,                          	           LPROD_NM,
				    BUYER_NAME,  TO_CHAR(PROD_INSDATE, 'YYYY-MM-DD') PROD_INSDATE, PROD_COST,
				    PROD_PRICE,  PROD_MILEAGE
				FROM PRODVIEW
				<include refid="sqlSearchFrag" />
				ORDER BY PROD_ID
			) A
		) B
		
		<!-- ?꺽새 문자는 이를 통해 사용해야 함 -->
		<![CDATA[
		WHERE RNUM >= #{startRow} AND RNUM <= #{endRow}
		]]>
	</select>

	<resultMap id="prodMap" type="ProdVO" autoMapping="true">
	 <id property="prodId" column="PROD_ID" />
		<association property="buyer" javaType="BuyerVO" autoMapping="true" />
		<collection property="memberSet" javaType="java.util.HashSet" ofType="MemberVO" autoMapping="true" />
	</resultMap>
	<select id="selectProd" parameterType="string" resultMap="prodMap">
		WITH CARTVIEW AS (
		    SELECT DISTINCT CART_PROD, CART_MEMBER
		    FROM CART
		), CARTMEMBER AS (
		    SELECT MEM_ID, MEM_NAME, MEM_HP, MEM_MAIL, CART_PROD
		    FROM CARTVIEW INNER JOIN MEMBER ON (CART_MEMBER = MEM_ID)
		)
		SELECT
		    PROD_ID, PROD_NAME, PROD_LGU,
		    PROD_BUYER, PROD_COST, PROD_PRICE,
		    PROD_SALE, PROD_OUTLINE, PROD_DETAIL,
		    PROD_IMG, PROD_TOTALSTOCK, TO_DATE(PROD_INSDATE, 'YYYY-MM-DD'),
		    PROD_PROPERSTOCK, PROD_SIZE, PROD_COLOR,
		    PROD_DELIVERY, PROD_UNIT, PROD_QTYIN,
		    PROD_QTYSALE, PROD_MILEAGE,
		    LPROD_NM,
		    BUYER_ID, BUYER_NAME, BUYER_CHARGER, BUYER_ADD1,
		    MEM_ID, MEM_NAME, MEM_HP, MEM_MAIL
		FROM PRODVIEW LEFT OUTER JOIN CARTMEMBER ON (PROD_ID = CART_PROD)
		WHERE PROD_ID = #{prodId}
	</select>
	
	<insert id="insertProd" parameterType="ProdVO">
		<!-- prodId가 비어있다면 selectKey에서 생성해 prodId를 insert함 -->
		<selectKey resultType="string" keyProperty="prodId" order="BEFORE">
			SELECT #{prodLgu} || TRIM(TO_CHAR(COUNT(*) + 1, '000000')) FROM PROD WHERE PROD_ID LIKE #{prodLgu} || '%'
		</selectKey>
			INSERT INTO PROD (
						PROD_ID, PROD_NAME, PROD_LGU,
						PROD_BUYER, PROD_COST, PROD_PRICE,
						PROD_SALE, PROD_OUTLINE, PROD_DETAIL,
						PROD_IMG, PROD_TOTALSTOCK, PROD_INSDATE,
						PROD_PROPERSTOCK, PROD_SIZE, PROD_COLOR,
						PROD_DELIVERY, PROD_UNIT, PROD_QTYIN,
						PROD_QTYSALE, PROD_MILEAGE
			)
			VALUES(
						#{prodId, jdbcType=VARCHAR}, #{prodName, jdbcType=VARCHAR}, #{prodLgu, jdbcType=CHAR},
						#{prodBuyer, jdbcType=CHAR}, #{prodCost, jdbcType=NUMERIC}, #{prodPrice, jdbcType=NUMERIC},
						#{prodSale, jdbcType=NUMERIC}, #{prodOutline, jdbcType=VARCHAR}, #{prodDetail, jdbcType=CLOB},
						#{prodImg, jdbcType=VARCHAR}, #{prodTotalstock, jdbcType=NUMERIC}, SYSDATE,
						#{prodProperstock, jdbcType=NUMERIC}, #{prodSize, jdbcType=VARCHAR}, #{prodColor, jdbcType=VARCHAR},
						#{prodDelivery, jdbcType=VARCHAR}, #{prodUnit, jdbcType=VARCHAR}, #{prodQtyin, jdbcType=NUMERIC},
						#{prodQtysale, jdbcType=NUMERIC}, #{prodMileage, jdbcType=NUMERIC}
			)
	</insert>
</mapper>